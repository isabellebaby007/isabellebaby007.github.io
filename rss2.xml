<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Isabelle的博客小站</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    <atom:link href="%5Bobject%20Object%5D" rel="hub"/>
    <description>Isabelle的博客小站</description>
    <pubDate>Tue, 13 Mar 2018 12:36:20 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>bootstrap</title>
      <link>http://yoursite.com/2018/03/13/bootstrap/</link>
      <guid>http://yoursite.com/2018/03/13/bootstrap/</guid>
      <pubDate>Mon, 12 Mar 2018 20:50:43 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;栅格系统&quot;&gt;&lt;a href=&quot;#栅格系统&quot; class=&quot;headerlink&quot; title=&quot;栅格系统&quot;&gt;&lt;/a&gt;栅格系统&lt;/h3&gt;&lt;p&gt;概念：分12列  row   col   &lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h3><p>概念：分12列  row   col   </p><a id="more"></a><table><thead><tr><th>分辨率阈值：768   992   1200</th><th></th></tr></thead><tbody><tr><td>&lt;768</td><td>手机</td></tr><tr><td>768&lt;      &lt;992</td><td>pad</td></tr><tr><td>992&lt;      &lt;1200</td><td>中等屏幕</td></tr><tr><td>&gt;1200</td><td>大屏幕</td></tr></tbody></table><table><thead><tr><th>容器</th><th></th></tr></thead><tbody><tr><td>container-fluid</td><td>流体</td></tr><tr><td>container</td><td>固定   1170    970   750    auto  针对不同的分辨率有不同的尺寸</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>无标题文档<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/bootstrap.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.container</span>&#123; <span class="attribute">width</span>:<span class="number">1000px</span> <span class="meta">!important</span>; <span class="attribute">border</span>:<span class="number">1px</span> <span class="number">#000</span> solid;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div class="container-fluid"&gt;</span></span><br><span class="line"><span class="comment">aaaaaaaaa</span></span><br><span class="line"><span class="comment">&lt;/div&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">aaaaaaaaa</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.11.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/bootstrap.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>col-lg-*</td><td></td></tr><tr><td>col-md-*</td><td></td></tr><tr><td>col-sm-*</td><td></td></tr><tr><td>col-xs-*</td></tr></tbody></table><table><thead><tr><th>列偏移</th><th></th></tr></thead><tbody><tr><td>col-[<em>]-offset-</em></td></tr></tbody></table><table><thead><tr><th>列排序</th><th></th></tr></thead><tbody><tr><td>col-[<em>]-push-</em></td><td></td></tr><tr><td>col-[<em>]-pull-</em></td></tr></tbody></table><table><thead><tr><th>嵌套</th><th></th></tr></thead><tbody><tr><td>嵌套的一行按照父级进行分配</td></tr></tbody></table><table><thead><tr><th>清浮动</th><th></th></tr></thead><tbody><tr><td>cleanfix</td></tr></tbody></table><h3 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h3><p>概念：针对不同设备展示或隐藏页面内容。</p><table><thead><tr><th>可见类</th><th></th></tr></thead><tbody><tr><td>visible-<em>-</em></td><td>lg md sm xs                                          block inline inline-block</td></tr><tr><td>hidden-*</td></tr></tbody></table><table><thead><tr><th>打印类</th><th></th></tr></thead><tbody><tr><td>visible-print-*</td><td></td></tr><tr><td>hidden-print</td></tr></tbody></table><table><thead><tr><th>固定定位</th><th></th></tr></thead><tbody><tr><td>affix</td></tr></tbody></table><h3 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h3><p>Glyphicons字体图标</p><p>好处：  1、减少请求     2、容易控制样式     </p><p>用法：font-face      字体路径   </p><p>自制图标：<a href="http://jingyan.baidu.com/article/f79b7cb346cf499145023e78.html" target="_blank" rel="noopener">http://jingyan.baidu.com/article/f79b7cb346cf499145023e78.html</a>   </p><h3 id="预定义样式风格"><a href="#预定义样式风格" class="headerlink" title="预定义样式风格"></a>预定义样式风格</h3><table><thead><tr><th>预定义样式风格</th><th></th></tr></thead><tbody><tr><td>primary</td><td>首选项</td></tr><tr><td>success</td><td>成功</td></tr><tr><td>info</td><td>一般信息</td></tr><tr><td>warning</td><td>警告</td></tr><tr><td>danger</td><td>危险</td></tr></tbody></table><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><p>基类：btn</p><table><thead><tr><th>样式</th><th></th></tr></thead><tbody><tr><td>btn-default</td><td>默认</td></tr><tr><td>btn-link</td><td>链接</td></tr></tbody></table><table><thead><tr><th>大小</th><th></th></tr></thead><tbody><tr><td>btn-*[lg,sm,xs]</td></tr></tbody></table><table><thead><tr><th>状态</th><th></th></tr></thead><tbody><tr><td>active</td><td></td></tr><tr><td>disabled</td></tr></tbody></table><table><thead><tr><th>种类</th><th></th></tr></thead><tbody><tr><td>a    input     button</td></tr></tbody></table><table><thead><tr><th>块级</th><th></th></tr></thead><tbody><tr><td>btn-block</td><td>比较适合用在移动设备上，自适应的按钮</td></tr></tbody></table><table><thead><tr><th>按钮组</th><th></th></tr></thead><tbody><tr><td>btn-group</td><td></td></tr><tr><td>btn-group-justified</td><td>按钮组的端点对齐</td></tr><tr><td>btn-group-vertical</td><td>按钮组从横向的改成纵向的</td></tr></tbody></table>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/03/13/bootstrap/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js面向对象之组件开发</title>
      <link>http://yoursite.com/2018/03/13/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91/</link>
      <guid>http://yoursite.com/2018/03/13/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91/</guid>
      <pubDate>Mon, 12 Mar 2018 16:39:44 GMT</pubDate>
      <description>
      
      </description>
      
      <comments>http://yoursite.com/2018/03/13/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91/#disqus_thread</comments>
    </item>
    
    <item>
      <title>面向对象基础</title>
      <link>http://yoursite.com/2018/03/12/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/</link>
      <guid>http://yoursite.com/2018/03/12/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/</guid>
      <pubDate>Mon, 12 Mar 2018 11:54:05 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;什么是面向对象&quot;&gt;&lt;a href=&quot;#什么是面向对象&quot; class=&quot;headerlink&quot; title=&quot;什么是面向对象&quot;&gt;&lt;/a&gt;什么是面向对象&lt;/h3&gt;&lt;p&gt;用对象的思想去写程序，就是面向对象编程&lt;/p&gt;
&lt;p&gt;-过程式写法&lt;/p&gt;
&lt;p&gt;-面向对象写法&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h3><p>用对象的思想去写程序，就是面向对象编程</p><p>-过程式写法</p><p>-面向对象写法</p><a id="more"></a><p>例如：数组Array时间Date</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=<span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">//系统自带的对象，叫做系统对象</span></span><br><span class="line"><span class="keyword">var</span> date=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">arr.length</span><br><span class="line">arr.push();</span><br><span class="line">arr.sort();</span><br><span class="line"></span><br><span class="line">date.getDate();</span><br><span class="line"><span class="keyword">var</span> t1=<span class="keyword">new</span> Tab();</span><br><span class="line">t1.over();</span><br><span class="line">t1.autoPlay();</span><br></pre></td></tr></table></figure><h3 id="面向对象编程（OOP）的特点"><a href="#面向对象编程（OOP）的特点" class="headerlink" title="面向对象编程（OOP）的特点"></a>面向对象编程（OOP）的特点</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>抽象</td><td>抓住核心问题</td></tr><tr><td>封装</td><td>只能通过对象来访问方法</td></tr><tr><td>继承</td><td>从已有对象上继承出新的对象</td></tr><tr><td>多态</td><td>多对象的不同形态</td></tr></tbody></table><h3 id="面向对象的基本写法何组成"><a href="#面向对象的基本写法何组成" class="headerlink" title="面向对象的基本写法何组成"></a>面向对象的基本写法何组成</h3><h4 id="对象的组成"><a href="#对象的组成" class="headerlink" title="对象的组成"></a>对象的组成</h4><p>方法（行为、操作）–函数：过程、动态的  </p><p>属性-变量：状态、静态的   </p><h4 id="创建第一个面向对象程序"><a href="#创建第一个面向对象程序" class="headerlink" title="创建第一个面向对象程序"></a>创建第一个面向对象程序</h4><p>对象下面的变量：叫做对象的属性</p><p>对象下面的函数：叫做对象的方法</p><table><thead><tr><th>为对象添加属性和方法</th><th></th></tr></thead><tbody><tr><td>object对象</td><td></td></tr><tr><td>this指向</td><td></td></tr><tr><td>创建两个对象：重复代码过多</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[];</span><br><span class="line">arr.number=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">arr.test=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="number">123</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">arr.test();</span><br><span class="line">arr.push();</span><br><span class="line">arr.sort();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=<span class="keyword">new</span> object();<span class="comment">//创建了一个空的对象</span></span><br><span class="line">obj.name=<span class="string">'小明'</span>;</span><br><span class="line">obj.showName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(obj.name);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="工厂方式与构造函数"><a href="#工厂方式与构造函数" class="headerlink" title="工厂方式与构造函数"></a>工厂方式与构造函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//原料</span></span><br><span class="line">    <span class="keyword">var</span> obj =<span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    <span class="comment">//加工</span></span><br><span class="line">    obj.name=name;</span><br><span class="line">    obj.showName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//出场</span></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1=createPerson(<span class="string">'小明'</span>);</span><br><span class="line">p1.showName();</span><br><span class="line"><span class="keyword">var</span> p2=createPerson(<span class="string">'小明'</span>);</span><br><span class="line">p2.showName();</span><br></pre></td></tr></table></figure><p>当new去调用一个函数：这个时候函数中的this就是创建出来的对象，而且函数的返回值直接就是this  （隐式返回）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreatePerson</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.shortName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      alert(<span class="keyword">this</span>.name);  </span><br><span class="line">    &#125;;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1=<span class="keyword">new</span> CreatePerson(<span class="string">'小明'</span>);</span><br><span class="line">p1.showName();</span><br><span class="line"><span class="keyword">var</span> p2=CreatePerson(<span class="string">'小明'</span>);</span><br><span class="line">p2.showName();</span><br></pre></td></tr></table></figure><h3 id="对象引用是什么和它的问题"><a href="#对象引用是什么和它的问题" class="headerlink" title="对象引用是什么和它的问题"></a>对象引用是什么和它的问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreatePerson</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.shortName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1=<span class="keyword">new</span> CreatePerson(<span class="string">'小强'</span>);</span><br><span class="line"><span class="keyword">var</span> p2=<span class="keyword">new</span> CreatePerson(<span class="string">'小明'</span>);</span><br><span class="line"></span><br><span class="line">alert(p1.showName==p2.showName);   <span class="comment">//false    这里为什么会出现false?</span></span><br></pre></td></tr></table></figure><p>原因：因为基本类型的比较，只要值相同就可以了；而对象类型的比较，值和引用都要相同才可以。p1.showName和p2.showName分别在不同的地址创建了对象，所以这里返回的是false。但是会造成很大的内存浪费</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">b += <span class="number">3</span>;</span><br><span class="line">alert(b); <span class="comment">//8</span></span><br><span class="line">alert(a); <span class="comment">//5   基本类型 : 赋值的时候只是值的复制</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">b.push(<span class="number">4</span>);</span><br><span class="line">alert(b);  <span class="comment">//[1,2,3,4]</span></span><br><span class="line">alert(a);  <span class="comment">//[1,2,3,4]   对象类型 : 赋值不仅是值的复制，而且也是引用的传递</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//var a = [1,2,3];</span></span><br><span class="line"><span class="comment">//var b = a;</span></span><br><span class="line"><span class="comment">//b = [1,2,3,4];</span></span><br><span class="line"><span class="comment">////alert(b); //[1,2,3,4]</span></span><br><span class="line"><span class="comment">//alert(a); //[1,2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">5</span>;</span><br><span class="line">alert(a == b);  <span class="comment">//  true  基本类型 : 值相同就可以</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">alert( a == b );  <span class="comment">//false  //对象类型 : 值和引用都相同才行</span></span><br></pre></td></tr></table></figure><h3 id="面向对象之原型学习"><a href="#面向对象之原型学习" class="headerlink" title="面向对象之原型学习"></a>面向对象之原型学习</h3><p>原型：去改写对象下面公用的方法或者属性，让同样的公用的东西在内存当中只存在一份（目的是为了提高性能）  </p><p>类比：原型就像css中的class一样 ，而普通方法就像CSS中的style一样</p><p>注意：原型prototype : 要写在构造函数的下面</p><h4 id="普通方法的例子"><a href="#普通方法的例子" class="headerlink" title="普通方法的例子"></a>普通方法的例子</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">var</span> arr2 = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    arr.sum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.length;i++)&#123;</span><br><span class="line">    result += <span class="keyword">this</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">    </span><br><span class="line">    &#125;;</span><br><span class="line">    arr2.sum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.length;i++)&#123;</span><br><span class="line">    result += <span class="keyword">this</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">    </span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//alert( arr.sum() );  //15</span></span><br><span class="line">    <span class="comment">//alert( arr2.sum() );  //10*/</span></span><br></pre></td></tr></table></figure><h4 id="原型的例子"><a href="#原型的例子" class="headerlink" title="原型的例子"></a>原型的例子</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">    <span class="keyword">var</span> arr2 = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Array</span>.prototype.sum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">            result += <span class="keyword">this</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    alert(arr.sum()); <span class="comment">//15</span></span><br><span class="line">    alert(arr2.sum()); <span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>类比css中style的优先级大于class,所以这里的优先级也是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line">arr.number = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">Array</span>.prototype.number = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">alert(arr.number);   <span class="comment">//10</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="built_in">Array</span>.prototype.number = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">alert(arr.number);   <span class="comment">//20</span></span><br></pre></td></tr></table></figure><h4 id="工厂方式之原型"><a href="#工厂方式之原型" class="headerlink" title="工厂方式之原型"></a>工厂方式之原型</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">CreatePerson</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    CreatePerson.prototype.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> p1 = <span class="keyword">new</span> CreatePerson(<span class="string">'小明'</span>);</span><br><span class="line">    <span class="comment">//p1.showName();</span></span><br><span class="line">    <span class="keyword">var</span> p2 = <span class="keyword">new</span> CreatePerson(<span class="string">'小强'</span>);</span><br><span class="line">    <span class="comment">//p2.showName();</span></span><br><span class="line"></span><br><span class="line">    alert(p1.showName == p2.showName); <span class="comment">//true   不仅值相同，而且地址相同，在内存中只存在一份</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><h4 id="小结：面向对象的写法"><a href="#小结：面向对象的写法" class="headerlink" title="小结：面向对象的写法"></a>小结：面向对象的写法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 构造函数(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.属性</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">构造函数.原型.方法 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> 对象<span class="number">1</span> = <span class="keyword">new</span> 构造函数();</span><br><span class="line"></span><br><span class="line">对象<span class="number">1.</span>方法();</span><br></pre></td></tr></table></figure><h3 id="传统的过程式编写选项卡"><a href="#传统的过程式编写选项卡" class="headerlink" title="传统的过程式编写选项卡"></a>传统的过程式编写选项卡</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="用面向对象封装通用选项卡"><a href="#用面向对象封装通用选项卡" class="headerlink" title="用面向对象封装通用选项卡"></a>用面向对象封装通用选项卡</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/03/12/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/#disqus_thread</comments>
    </item>
    
    <item>
      <title>html5的历史管理</title>
      <link>http://yoursite.com/2018/03/11/html5%E7%9A%84%E5%8E%86%E5%8F%B2%E7%AE%A1%E7%90%86/</link>
      <guid>http://yoursite.com/2018/03/11/html5%E7%9A%84%E5%8E%86%E5%8F%B2%E7%AE%A1%E7%90%86/</guid>
      <pubDate>Sun, 11 Mar 2018 05:28:05 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;历史管理&quot;&gt;&lt;a href=&quot;#历史管理&quot; class=&quot;headerlink&quot; title=&quot;历史管理&quot;&gt;&lt;/a&gt;历史管理&lt;/h3&gt;&lt;p&gt;onhashchange :改变hash值来管理&lt;/p&gt;
&lt;p&gt;history&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;t
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="历史管理"><a href="#历史管理" class="headerlink" title="历史管理"></a>历史管理</h3><p>onhashchange :改变hash值来管理</p><p>history</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>pushState</td><td>三个参数：数据  标题 (都没实现)    地址（可选）</td></tr><tr><td>popstate事件</td><td>读取数据  event.state</td></tr><tr><td>注意:网址是虚假的，需要在服务器指定对应</td><td>页面，不然刷新找不到页面</td></tr></tbody></table>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/03/11/html5%E7%9A%84%E5%8E%86%E5%8F%B2%E7%AE%A1%E7%90%86/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Firebug</title>
      <link>http://yoursite.com/2018/03/11/Firebug/</link>
      <guid>http://yoursite.com/2018/03/11/Firebug/</guid>
      <pubDate>Sun, 11 Mar 2018 04:56:50 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;命令&quot;&gt;&lt;a href=&quot;#命令&quot; class=&quot;headerlink&quot; title=&quot;命令&quot;&gt;&lt;/a&gt;命令&lt;/h3&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><a id="more"></a><p>console.dir(cat);   //输出所有信息</p><p>console.dirxml（）；//显示当前元素的代码结构</p><p>console.assert(a);   //断言，如果a是真，返回断言成功    a是假，返回断言失败</p><p>console.trace();//显示当前函数的执行过程</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">a</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">b()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title">b</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">c()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title">c</span>()&#123;</span><br><span class="line">    console.trace();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">'计时器'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">1000000</span>;i++)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timend(<span class="string">'计时器'</span>);</span><br></pre></td></tr></table></figure><p>查看性能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        b();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        c();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">var</span> b=<span class="number">10</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">var</span> c=<span class="number">20</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.profile();</span><br><span class="line">a();</span><br><span class="line"><span class="built_in">console</span>.profileEnd();</span><br></pre></td></tr></table></figure><h3 id="在其他浏览器下使用firebug"><a href="#在其他浏览器下使用firebug" class="headerlink" title="在其他浏览器下使用firebug"></a>在其他浏览器下使用firebug</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://getfirebug.com/firebug-lite.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/03/11/Firebug/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
