<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Isabelle的博客小站</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    <atom:link href="%5Bobject%20Object%5D" rel="hub"/>
    <description>Isabelle的博客小站</description>
    <pubDate>Tue, 06 Mar 2018 10:01:03 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>js中的正则表达式</title>
      <link>http://yoursite.com/2018/03/06/js%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <guid>http://yoursite.com/2018/03/06/js%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <pubDate>Tue, 06 Mar 2018 00:20:11 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h3&gt;&lt;p&gt;indexOf  查找&lt;br&gt;substring 获取子字符串&lt;br&gt;charAt  获取某个字符串&lt;br&gt;split  分割字符串，获得数组&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>indexOf  查找<br>substring 获取子字符串<br>charAt  获取某个字符串<br>split  分割字符串，获得数组<a id="more"></a>  </p><h4 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h4><p>字符串可以进行比较，所以可以用来判断字符串是不是数字类型  </p><pre><code>&lt;script&gt;//alert( &apos;a&apos;&lt;&apos;b&apos; );var str = &apos;5&apos;;if (str &lt;= &apos;9&apos; &amp;&amp; str &gt;= &apos;0&apos;) {    alert(&apos;是数字类型的字符串&apos;);} else {    alert(&apos;不是数字类型的字符串&apos;);}&lt;/script&gt;  </code></pre><h4 id="找出字符串中所有的数字"><a href="#找出字符串中所有的数字" class="headerlink" title="找出字符串中所有的数字"></a>找出字符串中所有的数字</h4><pre><code> &lt;script&gt;var str = &apos;haj123sdk54hask33dkhalsd879&apos;;function findNum(str) {    var arr = [];    var tmp = &apos;&apos;;    for (var i = 0; i &lt; str.length; i++) {        if (str.charAt(i) &lt;= &apos;9&apos; &amp;&amp; str.charAt(i) &gt;= &apos;0&apos;) {            tmp += str.charAt(i);        } else {            if (tmp) {                arr.push(tmp);                tmp = &apos;&apos;;            }        }    }    if (tmp) {        arr.push(tmp);        tmp = &apos;&apos;;    }    return arr;}alert(findNum(str)); &lt;/script&gt;  </code></pre><p><img src="/2018/03/06/js中的正则表达式/bijiao.png" alt="">  </p><p>上述功能正则表达式的写法:  </p><pre><code>function findNum(str) {        return str.match(/\d+/g);    }    alert(findNum(str)); </code></pre><h3 id="什么是正则"><a href="#什么是正则" class="headerlink" title="什么是正则"></a>什么是正则</h3><p>正则，也叫规则，让计算机能够读懂人类的规则。  </p><pre><code>var re= //;        //大部分用这种 简写的      var re= new RegExp();  </code></pre><h4 id="正则中的test方法"><a href="#正则中的test方法" class="headerlink" title="正则中的test方法"></a>正则中的test方法</h4><p>test:正则去匹配字符串，如果匹配成功就返回真，如果匹配失败就返回假  。test的写法：正则.test(字符串)。 </p><table><thead><tr><th>写法</th><th>含义</th></tr></thead><tbody><tr><td>\s</td><td>空格</td></tr><tr><td>\S</td><td>非空格</td></tr><tr><td>\d</td><td>数字</td></tr><tr><td>\D</td><td>非数字</td></tr><tr><td>\w</td><td>字符</td></tr><tr><td>\W</td><td>非字符</td></tr></tbody></table><pre><code>var str = &apos;374829348791&apos;;var re = /\D/;if( re.test(str) ){    alert(&apos;不全是数字&apos;);}else{    alert(&apos;全是数字&apos;);}</code></pre><h4 id="正则中的search方法"><a href="#正则中的search方法" class="headerlink" title="正则中的search方法"></a>正则中的search方法</h4><p>search : 正则去匹配字符串 , 如果匹配成功，就返回匹配成功的位置，如果匹配失败就返回 -1。 search的写法 : 字符串.search(正则)。正则中的默认 : 是区分大小写的 </p><p>如果不区分大小写的话，在正则的最后加标识 i 。  </p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/03/06/js%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#disqus_thread</comments>
    </item>
    
    <item>
      <title>函数返回值</title>
      <link>http://yoursite.com/2018/03/06/%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC/</link>
      <guid>http://yoursite.com/2018/03/06/%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC/</guid>
      <pubDate>Mon, 05 Mar 2018 18:41:32 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;函数返回值&quot;&gt;&lt;a href=&quot;#函数返回值&quot; class=&quot;headerlink&quot; title=&quot;函数返回值&quot;&gt;&lt;/a&gt;函数返回值&lt;/h3&gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/03/06/%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC/#disqus_thread</comments>
    </item>
    
    <item>
      <title>百度文库评分和百度音乐全选效果</title>
      <link>http://yoursite.com/2018/03/05/%E7%99%BE%E5%BA%A6%E6%96%87%E5%BA%93%E8%AF%84%E5%88%86%E5%92%8C%E7%99%BE%E5%BA%A6%E9%9F%B3%E4%B9%90%E5%85%A8%E9%80%89%E6%95%88%E6%9E%9C/</link>
      <guid>http://yoursite.com/2018/03/05/%E7%99%BE%E5%BA%A6%E6%96%87%E5%BA%93%E8%AF%84%E5%88%86%E5%92%8C%E7%99%BE%E5%BA%A6%E9%9F%B3%E4%B9%90%E5%85%A8%E9%80%89%E6%95%88%E6%9E%9C/</guid>
      <pubDate>Mon, 05 Mar 2018 10:33:04 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;百度文库评分效果&quot;&gt;&lt;a href=&quot;#百度文库评分效果&quot; class=&quot;headerlink&quot; title=&quot;百度文库评分效果&quot;&gt;&lt;/a&gt;百度文库评分效果&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2018/03/05/百度文库评分和百度音乐全选效果/百度文库评分.gif&quot; alt=&quot;&quot;&gt;  &lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="百度文库评分效果"><a href="#百度文库评分效果" class="headerlink" title="百度文库评分效果"></a>百度文库评分效果</h3><p><img src="/2018/03/05/百度文库评分和百度音乐全选效果/百度文库评分.gif" alt="">  </p><a id="more"></a><h3 id="百度音乐全选效果"><a href="#百度音乐全选效果" class="headerlink" title="百度音乐全选效果"></a>百度音乐全选效果</h3><p><img src="/2018/03/05/百度文库评分和百度音乐全选效果/百度音乐全选.gif" alt=""> </p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/03/05/%E7%99%BE%E5%BA%A6%E6%96%87%E5%BA%93%E8%AF%84%E5%88%86%E5%92%8C%E7%99%BE%E5%BA%A6%E9%9F%B3%E4%B9%90%E5%85%A8%E9%80%89%E6%95%88%E6%9E%9C/#disqus_thread</comments>
    </item>
    
    <item>
      <title>运算符流程控制</title>
      <link>http://yoursite.com/2018/03/05/%E8%BF%90%E7%AE%97%E7%AC%A6%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</link>
      <guid>http://yoursite.com/2018/03/05/%E8%BF%90%E7%AE%97%E7%AC%A6%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</guid>
      <pubDate>Mon, 05 Mar 2018 10:16:06 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;运算符&quot;&gt;&lt;a href=&quot;#运算符&quot; class=&quot;headerlink&quot; title=&quot;运算符&quot;&gt;&lt;/a&gt;运算符&lt;/h3&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><a id="more"></a> <p>算术运算符：+  、- 、 <em>  、 /  、   %（取模)<br>赋值： =   、+=  、 -= 、 </em>= 、 /= 、 %=<br>关系： &lt; 、 &gt; 、 &lt;= 、 &gt;= 、 == 、 != 、 === 、 !==<br>逻辑：&amp;&amp; 、 || 、 ！<br>运算符优先级： 括号</p><h3 id="取余"><a href="#取余" class="headerlink" title="取余"></a>取余</h3><p>效果：鼠标划过，隔行改变颜色，鼠标离开，恢复原来的灰色。  </p><pre><code>&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;    &lt;title&gt;无标题文档&lt;/title&gt;    &lt;script&gt;    window.onload = function() {        var aLi = document.getElementsByTagName(&apos;li&apos;);        var arr = [&apos;red&apos;, &apos;yellow&apos;, &apos;blue&apos;];        for (var i = 0; i &lt; aLi.length; i++) {            aLi[i].index = i;            aLi[i].style.background = arr[i % arr.length];            aLi[i].onmouseover = function() {                this.style.background = &apos;gray&apos;;            };            aLi[i].onmouseout = function() {                this.style.background = arr[this.index % arr.length];            };        }    };    &lt;/script&gt;    &lt;style&gt;    li {        height: 24px;        margin-bottom: 3px;        list-style: none;    }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;ul id=&quot;ul1&quot;&gt;        &lt;li&gt;&lt;/li&gt;        &lt;li&gt;&lt;/li&gt;        &lt;li&gt;&lt;/li&gt;        &lt;li&gt;&lt;/li&gt;        &lt;li&gt;&lt;/li&gt;        &lt;li&gt;&lt;/li&gt;        &lt;li&gt;&lt;/li&gt;        &lt;li&gt;&lt;/li&gt;        &lt;li&gt;&lt;/li&gt;        &lt;li&gt;&lt;/li&gt;        &lt;li&gt;&lt;/li&gt;        &lt;li&gt;&lt;/li&gt;        &lt;li&gt;&lt;/li&gt;    &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;  </code></pre><p><img src="/2018/03/05/运算符流程控制/quyu.gif" alt="">  </p><h3 id="隔行变色扩展"><a href="#隔行变色扩展" class="headerlink" title="隔行变色扩展"></a>隔行变色扩展</h3><pre><code>&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;    &lt;title&gt;无标题文档&lt;/title&gt;    &lt;script&gt;    window.onload = function() {        var aLi = document.getElementsByTagName(&apos;li&apos;);        var arr = [&apos;red&apos;, &apos;yellow&apos;];        var str = &apos;&apos;;        for (var i = 0; i &lt; aLi.length; i++) {            aLi[i].index = i;            aLi[i].style.background = arr[i % arr.length];            aLi[i].onmouseover = function() {                str = this.style.background; // 先存颜色                this.style.background = &apos;gray&apos;;            };            aLi[i].onmouseout = function() {                // this.style.background = arr[this.index%arr.length];                this.style.background = str;            };        }    };    &lt;/script&gt;    &lt;style&gt;    li {        height: 24px;        margin-bottom: 3px;        list-style: none;    }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;ul id=&quot;ul1&quot;&gt;        &lt;li&gt;&lt;/li&gt;        &lt;li&gt;&lt;/li&gt;        &lt;li&gt;&lt;/li&gt;        &lt;li&gt;&lt;/li&gt;        &lt;li&gt;&lt;/li&gt;        &lt;li&gt;&lt;/li&gt;        &lt;li&gt;&lt;/li&gt;        &lt;li&gt;&lt;/li&gt;        &lt;li&gt;&lt;/li&gt;        &lt;li&gt;&lt;/li&gt;        &lt;li&gt;&lt;/li&gt;        &lt;li&gt;&lt;/li&gt;        &lt;li&gt;&lt;/li&gt;    &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; </code></pre><h3 id="京东商城秒转时间"><a href="#京东商城秒转时间" class="headerlink" title="京东商城秒转时间"></a>京东商城秒转时间</h3><pre><code>&lt;script&gt;  var s = 3605; // 秒alert(Math.floor(s / 60) + &apos;分&apos; + s % 60 + &apos;秒&apos;);&lt;/script&gt;  </code></pre><h3 id="与-的区别"><a href="#与-的区别" class="headerlink" title="==与===的区别"></a>==与===的区别</h3><p>== 只判断值,而===先判断类型，再判断值。  </p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>注意：！还可以转换数据类型，如果！后面跟的是非零数，则结果为false。<br>以下例子里，alert(120&lt;90 || 20),结果为20 ，因为左边为false,继续往下找，直接把20赋给它。</p><pre><code>&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;    &lt;title&gt;无标题文档&lt;/title&gt;    &lt;script&gt;    // &amp;&amp; 与、|| 或、! 否    alert( 12&lt;90 &amp;&amp; 230&lt;80 );            // false    var a = 120 &lt; 90 &amp;&amp; 20;    alert( a );                            // false    alert( 120&lt;90 || 230&lt;80 );           //false      var b = 120 &lt; 90 || 20;    alert(b);                           // 20    var c = !!true;    alert( c );                        //true    var d = !200;    alert( d );                        //false     &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;   </code></pre><h4 id="反选小例子"><a href="#反选小例子" class="headerlink" title="反选小例子"></a>反选小例子</h4><pre><code>&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;    &lt;title&gt;无标题文档&lt;/title&gt;    &lt;script&gt;    window.onload = function() {        var aInp = document.getElementsByTagName(&apos;input&apos;);        // aInp[1].checked = false;        // aInp[2].checked = true;        aInp[0].onclick = function() {            for (var i = 1; i &lt; aInp.length; i++) {                aInp[i].checked = !aInp[i].checked;                /*                if( aInp[i].checked ) {                    aInp[i].checked = false;                } else {                    aInp[i].checked = true;                }                */            }        };    };    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;input type=&quot;button&quot; value=&quot;反选&quot; /&gt;    &lt;ul&gt;        &lt;li&gt;            &lt;input type=&quot;checkbox&quot; checked /&gt;        &lt;/li&gt;        &lt;li&gt;            &lt;input type=&quot;checkbox&quot; /&gt;        &lt;/li&gt;        &lt;li&gt;            &lt;input type=&quot;checkbox&quot; checked /&gt;        &lt;/li&gt;        &lt;li&gt;            &lt;input type=&quot;checkbox&quot; /&gt;        &lt;/li&gt;        &lt;li&gt;            &lt;input type=&quot;checkbox&quot; /&gt;        &lt;/li&gt;    &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><img src="/2018/03/05/运算符流程控制/fanxuan.gif" alt="">  </p><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p>判断：if 、 switch 、  三目运算？：<br>循环： while、 for<br>跳出：break、continue跳过<br>什么是真：非零的数字、字符串、true、函数、object、[]、{}、元素（存在）<br>什么是假：零、NaN、空字符串、false、null、未定义  </p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/03/05/%E8%BF%90%E7%AE%97%E7%AC%A6%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js作用域</title>
      <link>http://yoursite.com/2018/03/04/js%E4%BD%9C%E7%94%A8%E5%9F%9F/</link>
      <guid>http://yoursite.com/2018/03/04/js%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid>
      <pubDate>Sun, 04 Mar 2018 14:51:22 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;预解析机制&quot;&gt;&lt;a href=&quot;#预解析机制&quot; class=&quot;headerlink&quot; title=&quot;预解析机制&quot;&gt;&lt;/a&gt;预解析机制&lt;/h3&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="预解析机制"><a href="#预解析机制" class="headerlink" title="预解析机制"></a>预解析机制</h3><a id="more"></a>  <h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>域：空间、范围、区域……<br>作用：读、写<br>script        全局变量、全局函数,自上而下<br>函数  由里到外<br>浏览器：“JS解析器”<br>1）“找一些东西”    ：var  function 参数<br>a = …<br>所有的变量，在正式运行代码之前，都提前赋了一个值：未定义<br>fn1 = function fn1(){ alert(2); }<br>所有的函数，在正式运行代码之前，都是整个函数块<br>JS 的预解析<br>遇到重名的：只留一个<br>变量和函数重名了，就只留下函数</p><p>2）逐行解读代码：<br>表达式：= + - * / % ++ – ! 参数……<br>表达式可以修改预解析的值！  </p><h4 id="小例子"><a href="#小例子" class="headerlink" title="小例子"></a>小例子</h4><pre><code>    alert(a);                    // 输出   function a (){ alert(4); }//因为预解析之后，变量和函数重名了就只留下函数，所以a是整个函数块   function a(){alert(4)};    var a = 1;     alert(a);                    // 输出  1//表达式var a=1;修改了预解析的值    function a (){ alert(2); }    alert(a);                    // 输出  1//    函数不修改值    var a = 3;            alert(a);                    // 输出  3//表达式var a=3;修改了预解析的值    function a (){ alert(4); }    alert(a);                    // 输出  3//函数不修改值    alert( typeof a );          //number    // a();                                    // 报错  </code></pre><h3 id="js单线程运行"><a href="#js单线程运行" class="headerlink" title="js单线程运行"></a>js单线程运行</h3><pre><code>&lt;script&gt;alert(a);   //报错&lt;/script&gt;&lt;script&gt;var a=1;   //1alert(a);&lt;/script&gt;</code></pre><p>前一个script区域运行完之后，值会保存。</p><pre><code>&lt;script&gt;var a=1;   //1alert(a);&lt;/script&gt;  &lt;script&gt;alert(a);   //1&lt;/script&gt;</code></pre><h3 id="函数也是一个局部的域"><a href="#函数也是一个局部的域" class="headerlink" title="函数也是一个局部的域"></a>函数也是一个局部的域</h3><p>函数调用：预解析+逐行解读代码<br>1)预解析： var function 参数….<br>a=…<br>fn1=function(){<br>  alert(a);<br>  var a=2；<br>}<br>2）逐行解读代码：<br>表达式<br>函数调用<br>2.1）预解析：<br>  a=…  这里的a是局部变量<br>2.2)逐行解读代码：<br>  a=2;</p><pre><code>var a = 1;function fn1(){    alert(a);                        // undefined    var a = 2;                      //a=2}fn1();alert(a);                            // 1</code></pre><p>下面看看  不加var的影响<br>1)预解析： var function 参数….<br>a=…<br>fn1=function(){<br>  alert(a);<br>  a=2；<br>}<br>2）逐行解读代码：<br>表达式<br>函数调用<br>2.1）局部预解析：<br>因为函数里面没有var 所有没有找到，<br>2.2)局部逐行解读代码：<br>  a=2;</p><pre><code>var a = 1;function fn1(){    alert(a);                        // 1  所以返回父级去找。由里到外（作用域链）找到外面那个a    a = 2;                          //这里修改的是外面的那个a}fn1();alert(a);                            // 2  </code></pre><p>小结：先找东西，后执行。执行过程中遇到表达式就会去修改原来库里面的东西，如果遇到函数调用就开了一个新的作用域，一旦新的作用域开始了，又会重复以上步骤，新的作用域中如果没找到里面有东西，又会返回父级里面去找。  </p><h3 id="带参数的函数"><a href="#带参数的函数" class="headerlink" title="带参数的函数"></a>带参数的函数</h3><p>1)预解析： var function 参数….<br>a=…<br>fn1=function(a){<br>  alert(a);<br>  a=2；<br>}<br>2）逐行解读代码：<br>表达式<br>函数调用<br>2.1）局部预解析：<br>因为函数里面没有var ,也没有找到函数，所有没有找到。参数本质上就是一个局部变量。找到了参数，但是这个例子里函数调用并没有传进来。<br>参数 a=…未定义<br>2.2)局部逐行解读代码：<br>  局部变量a就是undefined  </p><pre><code>var a = 1;                           //全局变量a=1function fn1(a){    alert(a);                        // undefined    a = 2;                          //这句把a改成2}fn1();alert(a);                            // 这里读取父级的a=1  </code></pre><h3 id="函数调用带参数"><a href="#函数调用带参数" class="headerlink" title="函数调用带参数"></a>函数调用带参数</h3><p>1)预解析： var function 参数….<br>a=…<br>fn1=function(a){<br>  alert(a);<br>  a=2；<br>}<br>2）逐行解读代码：<br>表达式<br>函数调用fn1(a)<br>2.1）局部预解析：<br>参数本质上就是一个局部变量，因为这个例子里面传递了参数进来，所以a=undefined。<br>参数 a=…未定义<br>2.2)局部逐行解读代码：<br>因为传递进来的a=1,所以局部变量a=1,再下一步就是局部变量a=2。  全局变量a仍然是1</p><pre><code> var a = 1;function fn1(a){    alert(a);                        // 1    a = 2;}fn1(a);alert(a);                            // 1</code></pre><h3 id="任何函数都可以改全局变量"><a href="#任何函数都可以改全局变量" class="headerlink" title="任何函数都可以改全局变量"></a>任何函数都可以改全局变量</h3><p>因为函数内部没有这个变量的话，会从里往外找。</p><pre><code>var num = 0;function fn1(){    num++;}function fn2(){    num--;}fn2();fn1();fn2();alert(num);  </code></pre><h3 id="获取函数内的值"><a href="#获取函数内的值" class="headerlink" title="获取函数内的值"></a>获取函数内的值</h3><p>巧妙利用全局变量来去获取函数内的内容</p><pre><code>var str = &apos;&apos;;function fn1(){    var a = &apos;大鸡腿~&apos;;    str = a;}fn1();alert( str );   //大鸡腿</code></pre><p>另一种方法：</p><pre><code>function fn2(){    var a = &apos;9999999克拉钻石23456789&apos;;    fn3(a);}fn2();function fn3(a){    alert(a);}  </code></pre><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>if(){}和for(){}、do{}while不是作用域，函数是作用域。<br>firefox不能对下面的函数进行预解析,除了火狐以外，其他的浏览器都可以。   </p><pre><code>alert( fn1 );        // FF 不能对下面的函数进行预解析if( true ){    var a = 1;    function fn1(){    alert(123);}}  </code></pre><p>解决这个兼容性问题的方法是：以后尽量不要在if语句里面定义函数，全局变量。改成下面这种写法：  </p><h3 id="for里面包了一个函数，在函数里面不要直接使用i"><a href="#for里面包了一个函数，在函数里面不要直接使用i" class="headerlink" title="for里面包了一个函数，在函数里面不要直接使用i"></a>for里面包了一个函数，在函数里面不要直接使用i</h3><p>下例会出现undefined的原因是：点击事件函数是一个作用域，只要有作用域，就会有域解析，点击事件函数里面域解析的时候会找到var i=undefined,所以这里alert(i)是undefined。但是如果把for循环里面的var去掉的话，那么点击事件函数里面就没有变量，所以i就会到父级里面去找，父级i是3,所以此时alert(i)会弹出3。</p><pre><code>&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;    &lt;title&gt;无标题文档&lt;/title&gt;    &lt;script&gt;    window.onload = function() {        var aBtn = document.getElementsByTagName(&apos;input&apos;);        for (var i = 0; i &lt; aBtn.length; i++) {            aBtn[i].onclick = function() {                 alert( i );                                for (var i = 0; i &lt; aBtn.length; i++) {                    aBtn[i].style.background = &apos;yellow&apos;;                }            };        }    };    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;input type=&quot;button&quot; value=&quot;按钮1&quot; /&gt;    &lt;input type=&quot;button&quot; value=&quot;按钮2&quot; /&gt;    &lt;input type=&quot;button&quot; value=&quot;按钮3&quot; /&gt;&lt;/body&gt;&lt;/html&gt;  </code></pre><p><img src="/2018/03/04/js作用域/zuoyongyu.gif" alt=""><br>但是如果把js代码改成以下就会出错  </p><pre><code>&lt;script&gt;window.onload = function() {    var aBtn = document.getElementsByTagName(&apos;input&apos;);    for (var i = 0; i &lt; aBtn.length; i++) {        aBtn[i].onclick = function() {             alert( i );                // 3             aBtn[i].style.background = &apos;yellow&apos;;          };    }};&lt;/script&gt;  </code></pre><p><img src="/2018/03/04/js作用域/ccuowu.gif" alt=""> </p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/03/04/js%E4%BD%9C%E7%94%A8%E5%9F%9F/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
